@using SouthAfricanNumbers.Client.Services
@using SouthAfricanNumbers.Shared
@using SouthAfricanNumbers.Client.UIElements.Input

@page "/number/{Id:guid}"

@inject INumberService NumberService


<h3>Number</h3>

<EditForm Model="@currentNumber" OnValidSubmit="HandleValidSubmit">
    <CustomInputGuid @bind-Value="currentNumber.Id" ValidationFor="@(() => currentNumber.Id)" Label="Id" Id="za_id" ReadOnly=true />
    <CustomInputText @bind-Value="currentNumber.PhoneNumber" ValidationFor="@(() => currentNumber.PhoneNumber)" Label="Phone number" Id="za_number" />
    <div class="form-group my-4">
        <label for="za_timestamp">TimeStamp</label>
        <input class="form-control" id="za_timestamp" @bind="@currentNumber.TimeStamp" disabled />
    </div>

    <button type="submit" class="btn btn-primary ">Update</button>
    <DataAnnotationsValidator/>
</EditForm>

@if(result != null)
{
    <span>Update server response: @result.message</span>
}
else
{
    <span>Update server response: -</span>
}


@code {
    [Parameter]
    public Guid Id { get; set; }

    NumberResponse result = new NumberResponse();
    Number currentNumber = new Number();

    protected override async Task OnInitializedAsync()
    {
        if (Id == Guid.Empty)
        {
            currentNumber = new Number()
            {
                Id = Guid.NewGuid()
            };
        }
        else
        {
            currentNumber = await NumberService.GetNumberById(Id);
        }

        base.OnInitialized();
    }

    private async Task HandleValidSubmit()
    {
        result = null;
        result = await NumberService.EditNumber(currentNumber);
        currentNumber = result.serverNumber;
    }
}
